-- Хранимые процедуры и функции, триггеры
-- Создайте хранимую функцию hello(), которая будет возвращать приветствие, в зависимости от текущего времени суток. 
-- С 6:00 до 12:00 функция должна возвращать фразу "Доброе утро", с 12:00 до 18:00 функция должна возвращать фразу "Добрый день",
-- с 18:00 до 00:00 — "Добрый вечер", с 00:00 до 6:00 — "Доброй ночи".

DELIMITER //
SELECT NOW(), HOUR(NOW())//

-- SET GLOBAL log_bin_trust_function_creators = 1;
CREATE FUNCTION `hour` ()
RETURNS INT NOT DETERMINISTIC
BEGIN
  RETURN HOUR(NOW());
END//
  
SELECT `hour`()//

CREATE FUNCTION hello ()
RETURNS TINYTEXT NOT DETERMINISTIC
BEGIN
  DECLARE h INT;
  SET h = HOUR(NOW());
  CASE
    WHEN h BETWEEN 0 AND 5 THEN
    RETURN 'Доброй ночи';
    WHEN h BETWEEN 6 AND 11 THEN
    RETURN 'Доброе утро';
    WHEN h BETWEEN 12 AND 17 THEN
    RETURN 'Добрый день';
    WHEN h BETWEEN 18 AND 23 THEN
    RETURN 'Добрый вечер';
  END CASE;
END//

SELECT NOW(), hello()//


-- В таблице products есть два текстовых поля: name с названием товара и description с его
-- описанием. Допустимо присутствие обоих полей или одно из них. Ситуация, когда оба поля
-- принимают неопределенное значение NULL неприемлема. Используя триггеры, добейтесь
-- того, чтобы одно из этих полей или оба поля были заполнены. При попытке присвоить полям
-- NULL-значение необходимо отменить операцию.

USE shop;
DELIMITER //

DROP TRIGGER IF EXISTS check_product_name_description//

CREATE TRIGGER check_product_name_description
BEFORE UPDATE ON products
FOR EACH ROW 
BEGIN
	DECLARE prod_name VARCHAR(255);
	DECLARE prod_description TEXT;
	
	IF NEW.name IS NULL AND NEW.description IS NULL
	THEN
	 SET NEW.name = COALESCE(NEW.name, OLD.name);
	 SET NEW.description = COALESCE(NEW.description, OLD.description);
	 -- Можно сделать, чтобы выводил ошибку с текстом о невозможности изменения обеих столбцов
	 -- SIGNAL SQLSTATE '45000'
	 -- SET MESSAGE_TEXT = 'Операция не может быть выполнена. Значения NULL одновременно в name и в description недопустимы.';
	END IF;

END//

DELIMITER ;
-- Проверка на одновременный запрос изменений
-- UPDATE products SET name = NULL, description = NULL WHERE id = 1;

-- Проверка на последовательные изменения
-- UPDATE products SET name =  NULL WHERE id = 1;
-- UPDATE products SET description = NULL WHERE id = 1;

-- Возвращение значений
-- UPDATE products SET name = 'Intel Core i3-8100', description = 'Процессор для настольных персональных компьютеров, основанных на платформе Intel.' WHERE id = 1;

-- Напишите хранимую функцию для вычисления произвольного числа Фибоначчи. 
-- Числами Фибоначчи называется последовательность в которой число равно сумме двух предыдущих чисел. 
-- Вызов функции FIBONACCI(10) должен возвращать число 55.

DROP FUNCTION IF EXISTS FIBONACCI;
DELIMITER //

CREATE FUNCTION FIBONACCI(user_number INT)
RETURNS INT DETERMINISTIC
BEGIN
	SET @x = user_number;
	RETURN ( ( POW((1+SQRT(5))/2, @x) - POW((1-SQRT(5))/2, @x) ) / SQRT(5) );
END//

SELECT FIBONACCI(10)//


